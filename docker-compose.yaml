services:
  postgres:
    container_name: "yusauto_database"
    networks:
      - yusauto_backend_network
    image: postgres:16
    env_file:
      - ./.env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/pgsql/data
      - ./postgres_init:/docker-entrypoint-initdb.d
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 3s
      timeout: 4s
      retries: 10
      start_period: 10s

  pgadmin:
    container_name: "yusauto_pgadmin"
    networks:
      - yusauto_backend_network
    image: dpage/pgadmin4
    env_file:
      - ./.env
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./pgadmin_servers.json:/pgadmin4/servers.json
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

  minio:
    container_name: "yusauto_minio"
    networks:
      - yusauto_backend_network
    image: docker.io/bitnami/minio
    env_file:
      - ./.env
    volumes:
      - minio_data:/bitnami/minio/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: [ "CMD", "mc", "ready", "local" ]
      start_period: 10s
      interval: 3s
      timeout: 4s
      retries: 10

  api:
    container_name: "yusauto_api"
    networks:
      - yusauto_backend_network
    build:
      context: ./backend
    env_file:
      - ./.env
    ports:
      - "8000:8000"
    command: poetry run fastapi dev main.py --host 0.0.0.0 --port 8000
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./backend/app:/app/app
    healthcheck:
      test: [ "CMD-SHELL", "curl localhost:8000/docs" ]
      start_period: 10s
      interval: 3s
      timeout: 4s
      retries: 10
    restart: unless-stopped


volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  minio_data:
    driver: local

networks:
  yusauto_backend_network:

